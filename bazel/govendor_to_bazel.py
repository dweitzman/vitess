#!/usr/bin/python

# Translates vendor/vendor.json into repo.bzl for use with bazel

import json
import os

def remove_subdirs(git_repo):
    idx = git_repo.find('/', git_repo.find('/') + 1)
    if git_repo.startswith('github.com') or git_repo.startswith('golang.org'):
       idx = git_repo.find('/', idx + 1)

    if idx > 0:
      return git_repo[:idx]
    return git_repo

def main():
    revisions = {}
    with open('vendor/vendor.json', 'r') as f:
        packages = json.loads(f.read())['package']
    # Trim git repo names
    for pkg in packages:
        pkg['path'] = remove_subdirs(pkg['path'])
    # Only keep the most recent git repo for each path
    for pkg in sorted(packages, key=lambda e: e['revisionTime']):
        revisions[pkg['path']] = pkg['revision']
    # Iterate in order sorted by path
    print '# File auto-generated by %s' % os.path.basename(__file__)
    print
    print 'load("@bazel_gazelle//:deps.bzl", "go_repository")'
    print
    print 'def register_go_repos():'
    for key in sorted(revisions):
        import_path = key.replace('/', '_').replace('-', '_')
        path_components = import_path.split('_')
        domain_components = path_components[0].split('.')
        path_components[0] = '_'.join(reversed(domain_components))
        import_path = '_'.join(path_components).replace('.', '_')
        print '  go_repository('
        print '      name = "%s",' % import_path
        print '      commit = "%s",' % revisions[key]

        if 'coreos_etcd' in import_path:
            print '      # Avoid getting confused about a "build" file on case-insensitive systems'
            print '      build_file_generation = "on",'
            print '      build_file_name = "BUILD.bazel",'
            print '      # Not entirely sure why this is needed, but it works'
            print '      build_file_proto_mode = "disable",'

        print '      importpath = "%s"' % key
        print '  )'
        print ''

if __name__ == "__main__":
    main()
